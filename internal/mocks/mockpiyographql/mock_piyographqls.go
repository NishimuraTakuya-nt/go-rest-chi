// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/NishimuraTakuya-nt/go-rest-chi/internal/core/interfaces/external/piyographqls (interfaces: SampleClient)

// Package mockpiyographql is a generated GoMock package.
package mockpiyographql

import (
	context "context"
	reflect "reflect"

	graphql "github.com/Khan/genqlient/graphql"
	models "github.com/NishimuraTakuya-nt/go-rest-chi/internal/core/domain/models"
	gomock "github.com/golang/mock/gomock"
)

// MockSampleClient is a mock of SampleClient interface.
type MockSampleClient struct {
	ctrl     *gomock.Controller
	recorder *MockSampleClientMockRecorder
}

// MockSampleClientMockRecorder is the mock recorder for MockSampleClient.
type MockSampleClientMockRecorder struct {
	mock *MockSampleClient
}

// NewMockSampleClient creates a new mock instance.
func NewMockSampleClient(ctrl *gomock.Controller) *MockSampleClient {
	mock := &MockSampleClient{ctrl: ctrl}
	mock.recorder = &MockSampleClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSampleClient) EXPECT() *MockSampleClientMockRecorder {
	return m.recorder
}

// CreateSample mocks base method.
func (m *MockSampleClient) CreateSample(arg0 context.Context, arg1 *models.Sample) (*models.Sample, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSample", arg0, arg1)
	ret0, _ := ret[0].(*models.Sample)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSample indicates an expected call of CreateSample.
func (mr *MockSampleClientMockRecorder) CreateSample(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSample", reflect.TypeOf((*MockSampleClient)(nil).CreateSample), arg0, arg1)
}

// Execute mocks base method.
func (m *MockSampleClient) Execute(arg0 context.Context, arg1 string, arg2 func() (interface{}, error)) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", arg0, arg1, arg2)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockSampleClientMockRecorder) Execute(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockSampleClient)(nil).Execute), arg0, arg1, arg2)
}

// GqlClient mocks base method.
func (m *MockSampleClient) GqlClient() graphql.Client {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GqlClient")
	ret0, _ := ret[0].(graphql.Client)
	return ret0
}

// GqlClient indicates an expected call of GqlClient.
func (mr *MockSampleClientMockRecorder) GqlClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GqlClient", reflect.TypeOf((*MockSampleClient)(nil).GqlClient))
}

// ListSample mocks base method.
func (m *MockSampleClient) ListSample(arg0 context.Context, arg1, arg2 *int) ([]*models.Sample, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSample", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*models.Sample)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSample indicates an expected call of ListSample.
func (mr *MockSampleClientMockRecorder) ListSample(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSample", reflect.TypeOf((*MockSampleClient)(nil).ListSample), arg0, arg1, arg2)
}

// Sample mocks base method.
func (m *MockSampleClient) Sample(arg0 context.Context, arg1 string) (*models.Sample, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sample", arg0, arg1)
	ret0, _ := ret[0].(*models.Sample)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Sample indicates an expected call of Sample.
func (mr *MockSampleClientMockRecorder) Sample(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sample", reflect.TypeOf((*MockSampleClient)(nil).Sample), arg0, arg1)
}
