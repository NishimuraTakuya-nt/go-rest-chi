name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  id-token: write
  pull-requests: write

jobs:
#  lint:
#    name: Lint
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v4
#      - uses: actions/setup-go@v5
#        with:
#          go-version: '1.23'
#          check-latest: true
#          cache: true
#          cache-dependency-path: go.sum
#
#      - name: golangci-lint
#        uses: golangci/golangci-lint-action@v6
#        with:
#          version: latest
#          args: --timeout=5m --config=.golangci.yml --print-resources-usage -v

#  test:
#    name: Test
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v4
#      - uses: actions/setup-go@v5
#        with:
#          go-version: 1.23
#          check-latest: true
#          cache: true
#          cache-dependency-path: go.sum
#
#      - name: Cache Go modules, build artifacts
#        uses: actions/cache@v4
#        with:
#          path: ~/.cache/go-build
#          key: ${{ runner.os }}-go-build-${{ hashFiles('**/go.sum') }}
#          restore-keys: |
#            ${{ runner.os }}-go-build-
#
#      - name: Install dependencies
#        run: go mod download
#
#      - name: Run Tests
#        run: go test -race -v ./... -coverprofile=coverage.txt -covermode=atomic
#
#      - name: Upload coverage to Codecov
#        uses: codecov/codecov-action@v4
#        with:
#          token: ${{ secrets.CODECOV_TOKEN }}
#          file: ./coverage.txt
#          fail_ci_if_error: true

#  lint-compose:
#    name: Lint (Docker Compose)
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v4
#
#      - name: Set up Docker Buildx
#        uses: docker/setup-buildx-action@v3
#
#      - name: Cache Docker layers
#        uses: actions/cache@v4
#        with:
#          path: /tmp/.buildx-cache
#          key: ${{ runner.os }}-buildx-lint-compose-${{ github.sha }}
#          restore-keys: |
#            ${{ runner.os }}-buildx-lint-compose-
#
#      - name: Run Lint
#        run: docker compose run --rm lint
#
#  test-compose:
#    name: Test (Docker Compose)
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v4
#
#      - name: Set up Docker Buildx
#        uses: docker/setup-buildx-action@v3
#
#      - name: Cache Docker layers
#        uses: actions/cache@v4
#        with:
#          path: /tmp/docker-cache
#          key: ${{ runner.os }}-buildx-test-compose-${{ github.sha }}
#          restore-keys: |
#            ${{ runner.os }}-buildx-test-compose-
#
##  1    - name: Run Tests
##        run: |
##          mkdir -p ./coverage
##          docker compose run --rm test
#
## 手動で docker-compose のサービスの build を actions/cache@v4 でキャッシュしてみたが、遅い
#      # キャッシュされたイメージを読み込み
#      - name: Load cached Docker images
#        run: |
#          if [ -f /tmp/docker-cache/images.tar ]; then
#            docker load < /tmp/docker-cache/images.tar
#          fi
#
#      # Docker Composeでビルド
#      - name: Build with Docker Compose
#        run: docker compose build test
#
#      # ビルドしたイメージをキャッシュ
#      - name: Save Docker images to cache
#        run: |
#          mkdir -p /tmp/docker-cache
#          docker save $(docker images -q) > /tmp/docker-cache/images.tar
#
#      # テストの実行
#      - name: Run tests
#        run: |
#          mkdir -p ./coverage
#          docker compose run --rm test

  #      - name: Upload coverage to Codecov
  #        uses: codecov/codecov-action@v4
  #        with:
  #          token: ${{ secrets.CODECOV_TOKEN }}
  #          file: ./coverage/coverage.txt
  #          fail_ci_if_error: true


  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-lint-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-lint-

      - name: Run Lint
        uses: docker/build-push-action@v5
        with:
          context: .
          target: lint
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache


  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-test-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-test-

      - name: Run Tests
        uses: docker/build-push-action@v5
        with:
          context: .
          target: coverage
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
          outputs: type=local,dest=./coverage

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage/coverage.txt
          fail_ci_if_error: true







#  build:
#    name: Build
#    runs-on: ubuntu-latest
#    needs: [lint, test]
#    steps:
#      - uses: actions/checkout@v4
#      - uses: actions/setup-go@v5
#        with:
#          go-version: 1.23
#          check-latest: true
#          cache: true
#          cache-dependency-path: go.sum
#
#      - name: Cache Go modules, build artifacts
#        uses: actions/cache@v4
#        with:
#          path: ~/.cache/go-build
#          key: ${{ runner.os }}-go-build-${{ hashFiles('**/go.sum') }}
#          restore-keys: |
#            ${{ runner.os }}-go-build-
#
#      - name: Install dependencies
#        run: go mod download
#
#      - name: Build
#        run: go build -v -o app ./cmd/api

# deploy job で使う用
#      - uses: actions/upload-artifact@v4
#        with:
#          name: app
#          path: app

#  deploy:
#    name: Deploy to ECS
#    needs: build
#    runs-on: ubuntu-latest
#    if: github.ref == 'refs/heads/main'
#
#    steps:
#      - uses: actions/checkout@v4
#
#      - name: Configure AWS credentials
#        uses: aws-actions/configure-aws-credentials@v1
#        with:
#          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#          aws-region: ap-northeast-1
#
#      - name: Login to Amazon ECR
#        id: login-ecr
#        uses: aws-actions/amazon-ecr-login@v1
#
#      - name: Build, tag, and push image to Amazon ECR
#        env:
#          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#          ECR_REPOSITORY: your-repo-name
#          IMAGE_TAG: ${{ github.sha }}
#        run: |
#          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
#          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
#
#      - name: Update ECS service
#        run: |
#          aws ecs update-service --cluster your-cluster-name --service your-service-name --force-new-deployment
#
#      - name: Wait for ECS service to stabilize
#        run: |
#          aws ecs wait service-stable --cluster your-cluster-name --service your-service-name
